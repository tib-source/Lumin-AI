{
	"questions": [
		{
			"question": "Which data structure uses LIFO (Last-In-First-Out) principle?",
			"choices": ["Queue", "Stack", "Heap", "Linked List"],
			"answer": "Stack"
		},
		{
			"question": "Which sorting algorithm has a worst-case time complexity of O(n^2)?",
			"choices": ["Merge Sort", "Insertion Sort", "Heap Sort", "Quick Sort"],
			"answer": "Insertion Sort"
		},
		{
			"question": "What is the time complexity of inserting an element at the end of an array?",
			"choices": ["O(1)", "O(n)", "O(log n)", "O(n^2)"],
			"answer": "O(1)"
		},
		{
			"question": "Which data structure allows efficient retrieval, insertion, and deletion of elements based on their keys?",
			"choices": ["Array", "Stack", "Queue", "Hash Table"],
			"answer": "Hash Table"
		},
		{
			"question": "What is the worst-case time complexity of linear search algorithm?",
			"choices": ["O(1)", "O(log n)", "O(n)", "O(n^2)"],
			"answer": "O(n)"
		},
		{
			"question": "Which data structure uses a combination of both linked list and array?",
			"choices": ["Tree", "Heap", "Stack", "Hash Table"],
			"answer": "Tree"
		},
		{
			"question": "Which algorithm is used to find the shortest path between two vertices in a weighted graph?",
			"choices": ["DFS", "BFS", "Dijkstra's Algorithm", "Prim's Algorithm"],
			"answer": "Dijkstra's Algorithm"
		},
		{
			"question": "What is the time complexity of a binary search algorithm in a sorted array?",
			"choices": ["O(1)", "O(log n)", "O(n)", "O(n^2)"],
			"answer": "O(log n)"
		},
		{
			"question": "Which sorting algorithm is based on the divide-and-conquer technique?",
			"choices": ["Bubble Sort", "Selection Sort", "Merge Sort", "Radix Sort"],
			"answer": "Merge Sort"
		},
		{
			"question": "What is the purpose of a queue data structure?",
			"choices": [
				"To store elements in a sorted manner",
				"To store elements in a Last-In-First-Out (LIFO) manner",
				"To store elements in a First-In-First-Out (FIFO) manner",
				"To store elements in a random order"
			],
			"answer": "To store elements in a First-In-First-Out (FIFO) manner"
		}
	]
}
